module Klauzulator (
	klauzuluj,
	odneguj,
	klauzulaLista,
	listaKlauzul,
	odneguj,
	dem,
	pokazStr,
	Zdanie(
	Elementrarne,
	Rownowaznosc,
	Implikacja,
	Koniunkcja,
	Alternatywa,
	Negacja),
	(==>),
	(<=>),
	(&&&),
	(|||),
	(~~~),
	neg
) where
data Zdanie = 
	Elementarne String 			-- Oznacznie zdania
	| Rownowaznosc Zdanie Zdanie
	| Implikacja Zdanie Zdanie
	| Koniunkcja Zdanie Zdanie
	| Alternatywa Zdanie Zdanie
	| Negacja Zdanie 
	deriving (Show)

(==>) a b = Implikacja a b
(<=>) a b = Rownowaznosc a b
(&&&) a b = Koniunkcja a b
(|||) a b = Alternatywa a b
(~~~) a = Negacja a
neg a = Negacja a

z1 = Elementarne "z1"
z2 = Elementarne "z2"
z3 = Elementarne "z3"
z4 = Elementarne "z4"
n1=neg ( neg (neg (neg z1)))

i12 = z1 ==> z2
r34 = z3 <=> z4
kr34 = odneguj( dem (klauzuluj r34) )
wkr34 = wymnoz(odneguj( dem (klauzuluj r34) ) )
eh= (wymnoz(odneguj( dem (klauzuluj (z1==>(z2<=>(z3|||z4&&&z1)) )) )) )

klauzuluj::Zdanie -> Zdanie
klauzuluj e@(Elementarne a) = e
klauzuluj neg@(Negacja (Negacja a) ) = klauzuluj a
klauzuluj neg@(Negacja (Elementarne a)) = neg
klauzuluj neg@(Negacja a) = Negacja (klauzuluj a)
klauzuluj (Implikacja a b) =  Alternatywa (Negacja (klauzuluj a)) (klauzuluj b)
klauzuluj (Rownowaznosc a b) = klauzuluj (Koniunkcja (Implikacja (klauzuluj a) (klauzuluj b)) (Implikacja (klauzuluj b) (klauzuluj a)))
klauzuluj (Koniunkcja a b) = klauzuluj (Negacja ( Alternatywa (Negacja (klauzuluj a)) (Negacja (klauzuluj b))) )
klauzuluj (Alternatywa a b) = Alternatywa (klauzuluj a) (klauzuluj b)

dem::Zdanie -> Zdanie
dem (Negacja (Alternatywa a b) ) = dem ( Koniunkcja (odneguj (Negacja (dem a))) (odneguj (Negacja (dem b))) )
dem (Negacja (Koniunkcja a b) ) = dem ( Alternatywa (odneguj (Negacja (dem a))) (odneguj (Negacja (dem b))) )
dem e@(Negacja a) = e
dem e@(Elementarne a) = e
dem (Alternatywa a b) = Alternatywa (odneguj (dem a)) (odneguj(dem b))
dem (Koniunkcja a b) = Koniunkcja (odneguj (dem a)) (odneguj(dem b))

odneguj (Negacja (Negacja a) ) = a
odneguj (Negacja a) = Negacja (odneguj a)
odneguj e@(Elementarne a) = e
odneguj (Alternatywa a b) = Alternatywa (odneguj a) (odneguj b)
odneguj (Koniunkcja a b) = Koniunkcja (odneguj a) (odneguj b)
odneguj (Implikacja a b) = Implikacja (odneguj a) (odneguj b)
odneguj (Rownowaznosc a b) = Rownowaznosc (odneguj a) (odneguj b)

wymnoz (Alternatywa (Koniunkcja a b) (c@(Elementarne e) ) ) = Koniunkcja (Alternatywa (wymnoz a) (wymnoz c)) (Alternatywa (wymnoz b) (wymnoz c))
wymnoz (Alternatywa (c@(Elementarne e) ) (Koniunkcja a b) ) = Koniunkcja (Alternatywa (wymnoz a) (wymnoz c)) (Alternatywa (wymnoz b) (wymnoz c)) 
wymnoz (Alternatywa (Koniunkcja a b) (c@(Negacja e) ) ) = Koniunkcja (Alternatywa (wymnoz a) (wymnoz c)) (Alternatywa (wymnoz b) (wymnoz c))
wymnoz (Alternatywa (c@(Negacja e) ) (Koniunkcja a b) ) = Koniunkcja (Alternatywa (wymnoz a) (wymnoz c)) (Alternatywa (wymnoz b) (wymnoz c)) 
wymnoz (Alternatywa (Koniunkcja a b) (Koniunkcja c d) )  = Koniunkcja (Alternatywa (wymnoz a) (wymnoz c)) (Koniunkcja (Alternatywa (wymnoz a) (wymnoz d)) (Koniunkcja (Alternatywa (wymnoz b) (wymnoz c)) (Alternatywa (wymnoz c) (wymnoz d))))  
wymnoz (Alternatywa (Koniunkcja a b) (Alternatywa c d) ) = Koniunkcja (wymnoz (Alternatywa (wymnoz a) (wymnoz (Koniunkcja (wymnoz c) (wymnoz d))))) (wymnoz (Alternatywa (wymnoz b) (wymnoz (Koniunkcja (wymnoz c) (wymnoz d)))) ) 
wymnoz (Alternatywa alt@(Alternatywa c d) kon@(Koniunkcja a b) ) = wymnoz( Alternatywa kon alt)
wymnoz (Alternatywa a b) = Alternatywa (wymnoz a) (wymnoz b) 
wymnoz (Negacja a) = Negacja (wymnoz a)
wymnoz (Koniunkcja a b) = Koniunkcja (wymnoz a) (wymnoz b)
wymnoz e@(Elementarne a) = e

klauzulaLista::Zdanie -> [Zdanie]
klauzulaLista (Alternatywa a@(Alternatywa _ _) b@(Alternatywa _ _))=(klauzulaLista a) ++ (klauzulaLista b)
klauzulaLista (Alternatywa a@(Alternatywa _ _) b@(Elementarne e)) = (klauzulaLista a)++[b]
klauzulaLista (Alternatywa b@(Elementarne e) a@(Alternatywa _ _)) = (klauzulaLista a)++[b]
klauzulaLista (Alternatywa a@(Alternatywa _ _) b@(Negacja n)) = (klauzulaLista a)++[b]
klauzulaLista (Alternatywa b@(Negacja n) a@(Alternatywa _ _)) = (klauzulaLista a)++[b]
klauzulaLista (Alternatywa (a@(Elementarne _)) (b@(Elementarne _))) = [a,b]
klauzulaLista (Alternatywa (a@(Negacja _)) (b@(Negacja _))) = [a,b]
klauzulaLista (Alternatywa a b) = [a,b]
klauzulaLista a@(Elementarne _)=[a]
klauzulaLista a@(Negacja _)=[a]

listaKlauzul::Zdanie -> [[Zdanie]]
listaKlauzul (Koniunkcja a@(Alternatywa _ _) b@(Alternatywa _ _) ) = [klauzulaLista a, klauzulaLista b]
listaKlauzul (Koniunkcja a@(Alternatywa _ _) b@(Elementarne e)) = [b]:[klauzulaLista a]
listaKlauzul (Koniunkcja a@(Alternatywa _ _) b@(Negacja n)) = [b]:[klauzulaLista a]
listaKlauzul (Koniunkcja (b@(Elementarne _)) (alt@(Alternatywa _ _))) = listaKlauzul (Koniunkcja alt b)
listaKlauzul (Koniunkcja (b@(Negacja _)) (alt@(Alternatywa _ _))) = listaKlauzul (Koniunkcja alt b)
listaKlauzul (a@(Elementarne e)) = [[a]]
listaKlauzul (a@(Negacja n)) = [[a]]

pokazStr::Zdanie -> String
pokazStr (Rownowaznosc a b) = "( "++ pokazStr a ++"<=>"++ pokazStr b ++ " )"
pokazStr (Implikacja a b) = "( "++ pokazStr a ++"==>"++ pokazStr b ++ " )"
pokazStr (Alternatywa a b) = "( "++ pokazStr a ++" | "++ pokazStr b ++ " )"
pokazStr (Koniunkcja a b) = "( "++ pokazStr a ++" & "++ pokazStr b ++ " )"
pokazStr (Negacja a) = "( "++ "~"++pokazStr a ++ " )"
pokazStr (Elementarne str) = str

doKlauzul::Zdanie -> [[Zdanie]]
doKlauzul a = listaKlauzul ( wymnoz( odneguj( dem ( klauzuluj (a)) )) )

